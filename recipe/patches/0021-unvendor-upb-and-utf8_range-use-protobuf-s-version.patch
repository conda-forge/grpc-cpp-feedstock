From 3b2ce7995a3f6784823308c933c25931b8169118 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Fri, 28 Feb 2025 15:09:41 +1100
Subject: [PATCH 21/21] unvendor upb and utf8_range, use protobuf's version

---
 CMakeLists.txt                                | 523 +-----------------
 third_party/upb/upb/mem/alloc.h               |   2 +-
 third_party/upb/upb/mem/internal/arena.h      |   2 -
 .../upb/upb/mini_table/internal/message.h     |   3 +-
 third_party/upb/upb/port/def.inc              |  35 --
 5 files changed, 9 insertions(+), 556 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b3e4e93493..2352e6ee70 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -377,6 +377,9 @@ if(UNIX OR APPLE)
   endif()
 endif()
 
+# from libprotobuf
+find_package(protobuf CONFIG REQUIRED)
+
 # configure ccache if requested
 include(cmake/ccache.cmake)
 
@@ -2579,9 +2582,8 @@ target_link_libraries(grpc_upbgen
   PUBLIC  ${_gRPC_ALLTARGETS_LIBRARIES}
   # vendored libs
   PUBLIC  ${_gRPC_ADDRESS_SORTING_LIBRARIES}
-  PUBLIC  upb_json_lib
-  PUBLIC  upb_textformat_lib
   # external dependencies used within grpc
+  PRIVATE protobuf::libupb
   PRIVATE ${_gRPC_CARES_LIBRARIES}
   PRIVATE ${_gRPC_RE2_LIBRARIES}
   PRIVATE ${_gRPC_ZLIB_LIBRARIES}
@@ -3164,9 +3166,8 @@ target_link_libraries(grpc
   PUBLIC  ${_gRPC_ALLTARGETS_LIBRARIES}
   # vendored libs
   PUBLIC  ${_gRPC_ADDRESS_SORTING_LIBRARIES}
-  PUBLIC  upb_json_lib
-  PUBLIC  upb_textformat_lib
   # external dependencies used within grpc
+  PRIVATE protobuf::libupb
   PRIVATE ${_gRPC_CARES_LIBRARIES}
   PRIVATE ${_gRPC_RE2_LIBRARIES}
   PRIVATE ${_gRPC_ZLIB_LIBRARIES}
@@ -3864,9 +3865,8 @@ target_link_libraries(grpc_unsecure
   PUBLIC  ${_gRPC_ALLTARGETS_LIBRARIES}
   # vendored libs
   PUBLIC  ${_gRPC_ADDRESS_SORTING_LIBRARIES}
-  PUBLIC  upb_mini_descriptor_lib
-  PUBLIC  upb_wire_lib
   # external dependencies used within grpc
+  PRIVATE protobuf::libupb
   PRIVATE ${_gRPC_ZLIB_LIBRARIES}
   PRIVATE ${_gRPC_CARES_LIBRARIES}
   # external dependencies that need to available at runtime
@@ -4063,514 +4063,6 @@ target_link_libraries(gtest
 
 endif()
 
-add_library(upb_base_lib
-  third_party/upb/upb/base/status.c
-)
-
-target_compile_features(upb_base_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_base_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_base_lib PROPERTIES COMPILE_PDB_NAME "upb_base_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_base_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-endif()
-
-target_include_directories(upb_base_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_base_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_base_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(upb_json_lib ${_gRPC_STATIC_WIN32}
-  third_party/upb/upb/json/decode.c
-  third_party/upb/upb/json/encode.c
-  third_party/upb/upb/lex/atoi.c
-  third_party/upb/upb/lex/round_trip.c
-  third_party/upb/upb/lex/strtod.c
-  third_party/upb/upb/lex/unicode.c
-  third_party/upb/upb/message/copy.c
-  third_party/upb/upb/message/merge.c
-  third_party/upb/upb/reflection/def_pool.c
-  third_party/upb/upb/reflection/def_type.c
-  third_party/upb/upb/reflection/desc_state.c
-  third_party/upb/upb/reflection/enum_def.c
-  third_party/upb/upb/reflection/enum_reserved_range.c
-  third_party/upb/upb/reflection/enum_value_def.c
-  third_party/upb/upb/reflection/extension_range.c
-  third_party/upb/upb/reflection/field_def.c
-  third_party/upb/upb/reflection/file_def.c
-  third_party/upb/upb/reflection/internal/def_builder.c
-  third_party/upb/upb/reflection/internal/strdup2.c
-  third_party/upb/upb/reflection/message.c
-  third_party/upb/upb/reflection/message_def.c
-  third_party/upb/upb/reflection/message_reserved_range.c
-  third_party/upb/upb/reflection/method_def.c
-  third_party/upb/upb/reflection/oneof_def.c
-  third_party/upb/upb/reflection/service_def.c
-  src/core/ext/upb-gen/google/protobuf/descriptor.upb_minitable.c
-)
-
-target_compile_features(upb_json_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_json_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_json_lib PROPERTIES COMPILE_PDB_NAME "upb_json_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_json_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-  # see https://github.com/grpc/grpc/issues/36654
-  target_link_options(upb_json_lib PRIVATE -Wl,-undefined,dynamic_lookup)
-endif()
-
-target_include_directories(upb_json_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_json_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-  upb_mini_descriptor_lib
-  upb_wire_lib
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_json_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(upb_mem_lib
-  third_party/upb/upb/mem/alloc.c
-  third_party/upb/upb/mem/arena.c
-)
-
-target_compile_features(upb_mem_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_mem_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_mem_lib PROPERTIES COMPILE_PDB_NAME "upb_mem_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_mem_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-  # More details in third_party/upb/upb/port_def.inc;
-  # needs to be separate from gRPC_DLL_{IM,EX}PORTS
-  set_target_properties(upb_mem_lib PROPERTIES DEFINE_SYMBOL "UPB_MEM_DLL_EXPORTS")
-  if(BUILD_SHARED_LIBS)
-    target_compile_definitions(upb_mem_lib INTERFACE UPB_MEM_DLL_IMPORTS)
-  endif()
-endif()
-
-target_include_directories(upb_mem_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_mem_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_mem_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(upb_message_lib
-  third_party/upb/upb/hash/common.c
-  third_party/upb/upb/message/accessors.c
-  third_party/upb/upb/message/array.c
-  third_party/upb/upb/message/compat.c
-  third_party/upb/upb/message/internal/compare_unknown.c
-  third_party/upb/upb/message/internal/extension.c
-  third_party/upb/upb/message/internal/message.c
-  third_party/upb/upb/message/map.c
-  third_party/upb/upb/message/map_sorter.c
-  third_party/upb/upb/message/message.c
-  third_party/upb/upb/mini_table/extension_registry.c
-  third_party/upb/upb/mini_table/internal/message.c
-  third_party/upb/upb/mini_table/message.c
-  third_party/upb/upb/wire/eps_copy_input_stream.c
-  third_party/upb/upb/wire/reader.c
-)
-
-target_compile_features(upb_message_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_message_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_message_lib PROPERTIES COMPILE_PDB_NAME "upb_message_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_message_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-  # More details in third_party/upb/upb/port_def.inc;
-  # needs to be separate from gRPC_DLL_{IM,EX}PORTS
-  set_target_properties(upb_message_lib PROPERTIES DEFINE_SYMBOL "UPB_MSG_DLL_EXPORTS")
-  if(BUILD_SHARED_LIBS)
-    target_compile_definitions(upb_message_lib INTERFACE UPB_MSG_DLL_IMPORTS)
-  endif()
-endif()
-
-target_include_directories(upb_message_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_message_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-  upb_base_lib
-  upb_mem_lib
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_message_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(upb_mini_descriptor_lib
-  third_party/upb/upb/hash/common.c
-  third_party/upb/upb/mini_descriptor/build_enum.c
-  third_party/upb/upb/mini_descriptor/decode.c
-  third_party/upb/upb/mini_descriptor/internal/base92.c
-  third_party/upb/upb/mini_descriptor/internal/encode.c
-  third_party/upb/upb/mini_descriptor/link.c
-  third_party/upb/upb/mini_table/extension_registry.c
-  third_party/upb/upb/mini_table/internal/message.c
-  third_party/upb/upb/mini_table/message.c
-)
-
-target_compile_features(upb_mini_descriptor_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_mini_descriptor_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_mini_descriptor_lib PROPERTIES COMPILE_PDB_NAME "upb_mini_descriptor_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_mini_descriptor_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-endif()
-
-target_include_directories(upb_mini_descriptor_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_mini_descriptor_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-  upb_base_lib
-  upb_mem_lib
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_mini_descriptor_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(upb_textformat_lib ${_gRPC_STATIC_WIN32}
-  third_party/upb/upb/lex/atoi.c
-  third_party/upb/upb/lex/round_trip.c
-  third_party/upb/upb/lex/strtod.c
-  third_party/upb/upb/lex/unicode.c
-  third_party/upb/upb/message/copy.c
-  third_party/upb/upb/message/merge.c
-  third_party/upb/upb/reflection/def_pool.c
-  third_party/upb/upb/reflection/def_type.c
-  third_party/upb/upb/reflection/desc_state.c
-  third_party/upb/upb/reflection/enum_def.c
-  third_party/upb/upb/reflection/enum_reserved_range.c
-  third_party/upb/upb/reflection/enum_value_def.c
-  third_party/upb/upb/reflection/extension_range.c
-  third_party/upb/upb/reflection/field_def.c
-  third_party/upb/upb/reflection/file_def.c
-  third_party/upb/upb/reflection/internal/def_builder.c
-  third_party/upb/upb/reflection/internal/strdup2.c
-  third_party/upb/upb/reflection/message.c
-  third_party/upb/upb/reflection/message_def.c
-  third_party/upb/upb/reflection/message_reserved_range.c
-  third_party/upb/upb/reflection/method_def.c
-  third_party/upb/upb/reflection/oneof_def.c
-  third_party/upb/upb/reflection/service_def.c
-  third_party/upb/upb/text/encode.c
-  third_party/upb/upb/text/internal/encode.c
-)
-
-target_compile_features(upb_textformat_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_textformat_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_textformat_lib PROPERTIES COMPILE_PDB_NAME "upb_textformat_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_textformat_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-  # see https://github.com/grpc/grpc/issues/36654
-  target_link_options(upb_textformat_lib PRIVATE -Wl,-undefined,dynamic_lookup)
-endif()
-
-target_include_directories(upb_textformat_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_textformat_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-  upb_mini_descriptor_lib
-  upb_wire_lib
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_textformat_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(upb_wire_lib
-  third_party/upb/upb/wire/decode.c
-  third_party/upb/upb/wire/encode.c
-  third_party/upb/upb/wire/internal/decode_fast.c
-)
-
-target_compile_features(upb_wire_lib PUBLIC cxx_std_14)
-
-set_target_properties(upb_wire_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(upb_wire_lib PROPERTIES COMPILE_PDB_NAME "upb_wire_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb_wire_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-endif()
-
-target_include_directories(upb_wire_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(upb_wire_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-  utf8_range_lib
-  upb_message_lib
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS upb_wire_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
-
-
-add_library(utf8_range_lib
-  third_party/utf8_range/utf8_range.c
-)
-
-target_compile_features(utf8_range_lib PUBLIC cxx_std_14)
-
-set_target_properties(utf8_range_lib PROPERTIES
-  VERSION ${gRPC_CORE_VERSION}
-  SOVERSION ${gRPC_CORE_SOVERSION}
-)
-
-if(WIN32 AND MSVC)
-  set_target_properties(utf8_range_lib PROPERTIES COMPILE_PDB_NAME "utf8_range_lib"
-    COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
-  )
-  if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/utf8_range_lib.pdb
-      DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
-    )
-  endif()
-endif()
-
-target_include_directories(utf8_range_lib
-  PUBLIC $<INSTALL_INTERFACE:${gRPC_INSTALL_INCLUDEDIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-    ${_gRPC_RE2_INCLUDE_DIR}
-    ${_gRPC_SSL_INCLUDE_DIR}
-    ${_gRPC_UPB_GENERATED_DIR}
-    ${_gRPC_UPB_GRPC_GENERATED_DIR}
-    ${_gRPC_UPB_INCLUDE_DIR}
-    ${_gRPC_XXHASH_INCLUDE_DIR}
-    ${_gRPC_ZLIB_INCLUDE_DIR}
-)
-target_link_libraries(utf8_range_lib
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-)
-
-
-
-if(gRPC_INSTALL)
-  install(TARGETS utf8_range_lib EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
 
 if(gRPC_BUILD_TESTS)
 
@@ -6051,8 +5543,7 @@ target_include_directories(grpc_authorization_provider
 )
 target_link_libraries(grpc_authorization_provider
   ${_gRPC_ALLTARGETS_LIBRARIES}
-  upb_mini_descriptor_lib
-  upb_wire_lib
+  protobuf::libupb
   ${_gRPC_RE2_LIBRARIES}
   ${_gRPC_ZLIB_LIBRARIES}
   absl::config
diff --git a/third_party/upb/upb/mem/alloc.h b/third_party/upb/upb/mem/alloc.h
index db048ceeff..441731d2d8 100644
--- a/third_party/upb/upb/mem/alloc.h
+++ b/third_party/upb/upb/mem/alloc.h
@@ -52,7 +52,7 @@ UPB_INLINE void upb_free(upb_alloc* alloc, void* ptr) {
 
 // The global allocator used by upb. Uses the standard malloc()/free().
 
-UPB_MEM_DLL extern upb_alloc upb_alloc_global;
+extern upb_alloc upb_alloc_global;
 
 /* Functions that hard-code the global malloc.
  *
diff --git a/third_party/upb/upb/mem/internal/arena.h b/third_party/upb/upb/mem/internal/arena.h
index d67e418250..9a6469edc1 100644
--- a/third_party/upb/upb/mem/internal/arena.h
+++ b/third_party/upb/upb/mem/internal/arena.h
@@ -49,8 +49,6 @@ UPB_INLINE size_t UPB_PRIVATE(_upb_ArenaHas)(const struct upb_Arena* a) {
   return (size_t)(a->UPB_ONLYBITS(end) - a->UPB_ONLYBITS(ptr));
 }
 
-UPB_MEM_DLL void* UPB_PRIVATE(_upb_Arena_SlowMalloc)(struct upb_Arena * a, size_t size);
-
 UPB_API_INLINE void* upb_Arena_Malloc(struct upb_Arena* a, size_t size) {
   void* UPB_PRIVATE(_upb_Arena_SlowMalloc)(struct upb_Arena * a, size_t size);
 
diff --git a/third_party/upb/upb/mini_table/internal/message.h b/third_party/upb/upb/mini_table/internal/message.h
index 9a5ff34c4f..fd88e57442 100644
--- a/third_party/upb/upb/mini_table/internal/message.h
+++ b/third_party/upb/upb/mini_table/internal/message.h
@@ -88,9 +88,8 @@ UPB_INLINE const struct upb_MiniTable* UPB_PRIVATE(
   return mt;
 }
 
-UPB_MSG_DLL extern const struct upb_MiniTable UPB_PRIVATE(_kUpb_MiniTable_Empty);
-
 UPB_INLINE const struct upb_MiniTable* UPB_PRIVATE(_upb_MiniTable_Empty)(void) {
+  extern const struct upb_MiniTable UPB_PRIVATE(_kUpb_MiniTable_Empty);
 
   return &UPB_PRIVATE(_kUpb_MiniTable_Empty);
 }
diff --git a/third_party/upb/upb/port/def.inc b/third_party/upb/upb/port/def.inc
index a1add0641d..4c073b32ff 100644
--- a/third_party/upb/upb/port/def.inc
+++ b/third_party/upb/upb/port/def.inc
@@ -440,38 +440,3 @@ void __asan_unpoison_memory_region(void const volatile *addr, size_t size);
 #define UPB_FUTURE_PYTHON_CLOSED_ENUM_ENFORCEMENT 1
 
 #endif
-
-// UPB_{MEM,MSG}_DLL
-// inspired by https://github.com/abseil/abseil-cpp/blob/20220623.1/absl/base/config.h#L730-L747
-//
-// When building upb as a DLL, this macro expands to `__declspec(dllexport)`
-// so we can annotate symbols appropriately as being exported. When used in
-// headers consuming a DLL, this macro expands to `__declspec(dllimport)` so
-// that consumers know the symbol is defined inside the DLL. In all other cases,
-// the macro expands to nothing.
-// Note: UPB_{MEM,MSG}_DLL_EXPORTS is set in CMakeLists.txt when building shared upb
-//       UPB_{MEM,MSG}_DLL_IMPORTS is set by us as part of the interface for consumers of the DLL
-#if defined(UPB_MEM_DLL_EXPORTS)
-#define UPB_MEM_DLL __declspec(dllexport)
-#elif defined(UPB_MEM_DLL_IMPORTS)
-#define UPB_MEM_DLL __declspec(dllimport)
-#else
-#define UPB_MEM_DLL
-#endif // defined(UPB_MEM_DLL_EXPORTS)
-
-#if defined(UPB_MSG_DLL_EXPORTS)
-#define UPB_MSG_DLL __declspec(dllexport)
-#elif defined(UPB_MSG_DLL_IMPORTS)
-#define UPB_MSG_DLL __declspec(dllimport)
-#else
-#define UPB_MSG_DLL
-#endif // defined(UPB_MSG_DLL_EXPORTS)
-
-// same for GRPC_UPBGEN
-#if defined(GRPC_UPBGEN_DLL_EXPORTS)
-#define GRPC_UPBGEN_DLL __declspec(dllexport)
-#elif defined(GRPC_UPBGEN_DLL_IMPORTS)
-#define GRPC_UPBGEN_DLL __declspec(dllimport)
-#else
-#define GRPC_UPBGEN_DLL
-#endif // defined(GRPC_UPBGEN_DLL_EXPORTS)
