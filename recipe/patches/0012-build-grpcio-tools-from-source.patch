From 6bdcff13fe6ef5c5fc18b50f0a12cf37343917c6 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Tue, 4 Mar 2025 08:53:30 +1100
Subject: [PATCH 12/15] build grpcio-tools from source

---
 tools/distrib/python/grpcio_tools/setup.py | 43 ++++++++++++++++------
 1 file changed, 31 insertions(+), 12 deletions(-)

diff --git a/tools/distrib/python/grpcio_tools/setup.py b/tools/distrib/python/grpcio_tools/setup.py
index a30222be92..6722f199ec 100644
--- a/tools/distrib/python/grpcio_tools/setup.py
+++ b/tools/distrib/python/grpcio_tools/setup.py
@@ -15,6 +15,7 @@
 import errno
 import os
 import os.path
+import pathlib
 import platform
 import re
 import shlex
@@ -177,12 +178,9 @@ EXTRA_ENV_LINK_ARGS = os.environ.get("GRPC_PYTHON_LDFLAGS", None)
 if EXTRA_ENV_COMPILE_ARGS is None:
     EXTRA_ENV_COMPILE_ARGS = ""
     if "win32" in sys.platform:
-        # MSVC by defaults uses C++14 and C89 so both needs to be configured.
+        # MSVC can only do `/std:c++` or `/std:c`, but not both
         EXTRA_ENV_COMPILE_ARGS += " /std:c++17"
-        EXTRA_ENV_COMPILE_ARGS += " /std:c11"
-        # We need to statically link the C++ Runtime, only the C runtime is
-        # available dynamically
-        EXTRA_ENV_COMPILE_ARGS += " /MT"
+        EXTRA_ENV_COMPILE_ARGS += " /MD"
     elif "linux" in sys.platform:
         # GCC by defaults uses C17 so only C++17 needs to be specified.
         EXTRA_ENV_COMPILE_ARGS += " -std=c++17"
@@ -241,14 +239,16 @@ EXTRA_LINK_ARGS = shlex.split(EXTRA_ENV_LINK_ARGS)
 if BUILD_WITH_STATIC_LIBSTDCXX:
     EXTRA_LINK_ARGS.append("-static-libstdc++")
 
-CC_FILES = [os.path.normpath(cc_file) for cc_file in protoc_lib_deps.CC_FILES]
+CC_FILES = []
 PROTO_FILES = [
     os.path.normpath(proto_file) for proto_file in protoc_lib_deps.PROTO_FILES
 ]
+prefix = "LIBRARY_PREFIX" if "win32" in sys.platform else "PREFIX"
+prefix_include = os.path.join(os.environ[prefix], "include")
 CC_INCLUDES = [
-    os.path.normpath(include_dir) for include_dir in protoc_lib_deps.CC_INCLUDES
+    prefix_include
 ]
-PROTO_INCLUDE = os.path.normpath(protoc_lib_deps.PROTO_INCLUDE)
+PROTO_INCLUDE = prefix_include
 
 GRPC_PYTHON_TOOLS_PACKAGE = "grpc_tools"
 GRPC_PYTHON_PROTO_RESOURCES_NAME = "_proto"
@@ -290,16 +290,34 @@ def package_data():
     return {GRPC_PYTHON_TOOLS_PACKAGE: proto_files}
 
 
+if "win32" in sys.platform:
+    absl_libs = (
+        'abseil_dll', 'absl_log_flags', 'absl_flags_commandlineflag', 'absl_flags_commandlineflag_internal',
+        'absl_flags_config', 'absl_flags_internal', 'absl_flags_marshalling', 'absl_flags_parse',
+        'absl_flags_private_handle_accessor', 'absl_flags_program_name', 'absl_flags_reflection',
+        'absl_flags_usage', 'absl_flags_usage_internal',
+    )
+    # non-standard "lib"-prefix on windows
+    proto_libs = ('libprotobuf', 'libprotoc',)
+else:
+    absl_glob = pathlib.Path(os.environ['PREFIX']).glob('lib/libabsl_*.so')
+    absl_libs = tuple(lib.stem[3:] for lib in absl_glob)
+    proto_libs = ('protobuf', 'protoc',)
+
+EXTENSION_LIBRARIES = absl_libs + proto_libs + ("utf8_range",)
+
+
 def extension_modules():
     if BUILD_WITH_CYTHON:
         plugin_sources = [os.path.join("grpc_tools", "_protoc_compiler.pyx")]
     else:
         plugin_sources = [os.path.join("grpc_tools", "_protoc_compiler.cpp")]
 
+    grpc_root = os.environ["SRC_DIR"]
     plugin_sources += [
         os.path.join("grpc_tools", "main.cc"),
-        os.path.join("grpc_root", "src", "compiler", "python_generator.cc"),
-        os.path.join("grpc_root", "src", "compiler", "proto_parser_helper.cc"),
+        os.path.join(grpc_root, "src", "compiler", "python_generator.cc"),
+        os.path.join(grpc_root, "src", "compiler", "proto_parser_helper.cc"),
     ] + CC_FILES
 
     plugin_ext = Extension(
@@ -307,10 +325,11 @@ def extension_modules():
         sources=plugin_sources,
         include_dirs=[
             ".",
-            "grpc_root",
-            os.path.join("grpc_root", "include"),
+            grpc_root,
+            os.path.join(grpc_root, "include"),
         ]
         + CC_INCLUDES,
+        libraries=list(EXTENSION_LIBRARIES),
         define_macros=list(DEFINE_MACROS),
         extra_compile_args=list(EXTRA_COMPILE_ARGS),
         extra_link_args=list(EXTRA_LINK_ARGS),
