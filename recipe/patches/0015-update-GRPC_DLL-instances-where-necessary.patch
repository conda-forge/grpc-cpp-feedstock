From a1b3b6828b80bc9b669aedc51c085992b05ed8f3 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Sun, 2 Mar 2025 07:16:19 +1100
Subject: [PATCH 15/15] update GRPC_DLL instances where necessary

---
 include/grpc/event_engine/event_engine.h                  | 2 +-
 src/core/config/core_configuration.h                      | 2 +-
 src/core/ext/transport/chttp2/server/chttp2_server.h      | 2 +-
 src/core/ext/transport/inproc/inproc_transport.h          | 2 +-
 src/core/lib/channel/channel_args.h                       | 4 ++--
 src/core/lib/debug/trace_flags.h                          | 2 +-
 src/core/lib/experiments/config.h                         | 4 ++--
 src/core/lib/iomgr/iomgr.h                                | 2 +-
 src/core/lib/promise/activity.h                           | 2 +-
 src/core/lib/resource_quota/thread_quota.h                | 2 +-
 src/core/lib/security/context/security_context.h          | 2 +-
 .../credentials/tls/grpc_tls_certificate_provider.h       | 2 +-
 src/core/lib/security/util/json_util.h                    | 2 +-
 src/core/lib/surface/call.h                               | 4 ++--
 src/core/lib/surface/completion_queue.h                   | 8 ++++----
 src/core/util/json/json_reader.cc                         | 2 +-
 src/core/util/json/json_reader.h                          | 2 +-
 src/core/util/load_file.h                                 | 2 +-
 src/core/util/time.h                                      | 4 ++--
 19 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/include/grpc/event_engine/event_engine.h b/include/grpc/event_engine/event_engine.h
index 36485af1f6..6198dac4c1 100644
--- a/include/grpc/event_engine/event_engine.h
+++ b/include/grpc/event_engine/event_engine.h
@@ -139,7 +139,7 @@ class EventEngine : public std::enable_shared_from_this<EventEngine>,
   /// Returned by \a Connect, and can be passed to \a CancelConnect.
   struct ConnectionHandle {
     intptr_t keys[2];
-    static const GRPC_DLL ConnectionHandle kInvalid;
+    static const ConnectionHandle kInvalid;
   };
   /// Thin wrapper around a platform-specific sockaddr type. A sockaddr struct
   /// exists on all platforms that gRPC supports.
diff --git a/src/core/config/core_configuration.h b/src/core/config/core_configuration.h
index 29bacf96d5..08f17a2d40 100644
--- a/src/core/config/core_configuration.h
+++ b/src/core/config/core_configuration.h
@@ -35,7 +35,7 @@ namespace grpc_core {
 
 // Global singleton that stores library configuration - factories, etc...
 // that plugins might choose to extend.
-class GRPC_DLL CoreConfiguration {
+class CoreConfiguration {
  public:
   CoreConfiguration(const CoreConfiguration&) = delete;
   CoreConfiguration& operator=(const CoreConfiguration&) = delete;
diff --git a/src/core/ext/transport/chttp2/server/chttp2_server.h b/src/core/ext/transport/chttp2/server/chttp2_server.h
index 7cbec1b304..fe99f42ee1 100644
--- a/src/core/ext/transport/chttp2/server/chttp2_server.h
+++ b/src/core/ext/transport/chttp2/server/chttp2_server.h
@@ -231,7 +231,7 @@ class PassiveListenerImpl final : public PassiveListener {
       std::unique_ptr<grpc_event_engine::experimental::EventEngine::Endpoint>
           endpoint) override ABSL_LOCKS_EXCLUDED(mu_);
 
-  absl::Status AcceptConnectedFd(GRPC_UNUSED int fd) override
+  GRPC_DLL absl::Status AcceptConnectedFd(GRPC_UNUSED int fd) override
       ABSL_LOCKS_EXCLUDED(mu_);
 
   void ListenerDestroyed() ABSL_LOCKS_EXCLUDED(mu_);
diff --git a/src/core/ext/transport/inproc/inproc_transport.h b/src/core/ext/transport/inproc/inproc_transport.h
index 05030d6e40..b1a9fe8e9a 100644
--- a/src/core/ext/transport/inproc/inproc_transport.h
+++ b/src/core/ext/transport/inproc/inproc_transport.h
@@ -21,7 +21,7 @@
 #include "src/core/lib/debug/trace.h"
 #include "src/core/lib/transport/transport.h"
 
-grpc_channel* grpc_inproc_channel_create(grpc_server* server,
+GRPC_DLL grpc_channel* grpc_inproc_channel_create(grpc_server* server,
                                          const grpc_channel_args* args,
                                          void* reserved);
 
diff --git a/src/core/lib/channel/channel_args.h b/src/core/lib/channel/channel_args.h
index d32b5585b4..0849a66d10 100644
--- a/src/core/lib/channel/channel_args.h
+++ b/src/core/lib/channel/channel_args.h
@@ -393,8 +393,8 @@ class ChannelArgs {
   using CPtr =
       std::unique_ptr<const grpc_channel_args, ChannelArgs::ChannelArgsDeleter>;
 
-  ChannelArgs();
-  ~ChannelArgs();
+  GRPC_DLL ChannelArgs();
+  GRPC_DLL ~ChannelArgs();
   ChannelArgs(const ChannelArgs&);
   ChannelArgs& operator=(const ChannelArgs&);
   ChannelArgs(ChannelArgs&&) noexcept;
diff --git a/src/core/lib/debug/trace_flags.h b/src/core/lib/debug/trace_flags.h
index a01353ffff..4929415d57 100644
--- a/src/core/lib/debug/trace_flags.h
+++ b/src/core/lib/debug/trace_flags.h
@@ -49,7 +49,7 @@ extern DebugOnlyTraceFlag subchannel_refcount_trace;
 extern DebugOnlyTraceFlag work_serializer_trace;
 extern TraceFlag api_trace;
 extern TraceFlag apple_polling_trace;
-extern TraceFlag backend_metric_trace;
+GRPC_DLL extern TraceFlag backend_metric_trace;
 extern TraceFlag backend_metric_filter_trace;
 extern TraceFlag bdp_estimator_trace;
 extern TraceFlag call_trace;
diff --git a/src/core/lib/experiments/config.h b/src/core/lib/experiments/config.h
index e74f7c6b71..8262e87816 100644
--- a/src/core/lib/experiments/config.h
+++ b/src/core/lib/experiments/config.h
@@ -64,7 +64,7 @@ class ExperimentFlags {
   static void TestOnlyClear();
 
  private:
-  static bool LoadFlagsAndCheck(size_t experiment_id);
+  GRPC_DLL static bool LoadFlagsAndCheck(size_t experiment_id);
 
   // We layout experiment flags in groups of 63... each 64 bit word contains
   // 63 enablement flags (one per experiment), and the high bit which indicates
@@ -76,7 +76,7 @@ class ExperimentFlags {
   static constexpr size_t kNumExperimentFlagsWords = 8;
   static constexpr size_t kFlagsPerWord = 63;
   static constexpr uint64_t kLoadedFlag = 0x8000000000000000ull;
-  static std::atomic<uint64_t> experiment_flags_[kNumExperimentFlagsWords];
+  GRPC_DLL static std::atomic<uint64_t> experiment_flags_[kNumExperimentFlagsWords];
 };
 
 // Return true if experiment \a experiment_id is enabled.
diff --git a/src/core/lib/iomgr/iomgr.h b/src/core/lib/iomgr/iomgr.h
index 280471fae8..506c6e3682 100644
--- a/src/core/lib/iomgr/iomgr.h
+++ b/src/core/lib/iomgr/iomgr.h
@@ -42,7 +42,7 @@ void grpc_iomgr_shutdown_background_closure();
 // Returns true if polling engine runs in the background, false otherwise.
 // Currently only 'epollbg' runs in the background.
 //
-bool grpc_iomgr_run_in_background();
+GRPC_DLL bool grpc_iomgr_run_in_background();
 
 /// Returns true if the caller is a worker thread for any background poller.
 bool grpc_iomgr_is_any_background_poller_thread();
diff --git a/src/core/lib/promise/activity.h b/src/core/lib/promise/activity.h
index d08ef2dd6a..a3e9e22fb2 100644
--- a/src/core/lib/promise/activity.h
+++ b/src/core/lib/promise/activity.h
@@ -75,7 +75,7 @@ struct Unwakeable final : public Wakeable {
   void Wakeup(WakeupMask) override {}
   void WakeupAsync(WakeupMask) override {}
   void Drop(WakeupMask) override {}
-  std::string ActivityDebugTag(WakeupMask) const override;
+  GRPC_DLL std::string ActivityDebugTag(WakeupMask) const override;
 };
 static Unwakeable* unwakeable() {
   return NoDestructSingleton<Unwakeable>::Get();
diff --git a/src/core/lib/resource_quota/thread_quota.h b/src/core/lib/resource_quota/thread_quota.h
index 18a6e13e7f..83594ba83b 100644
--- a/src/core/lib/resource_quota/thread_quota.h
+++ b/src/core/lib/resource_quota/thread_quota.h
@@ -45,7 +45,7 @@ class ThreadQuota : public RefCounted<ThreadQuota> {
   bool Reserve(size_t num_threads);
 
   // Release some number of threads.
-  void Release(size_t num_threads);
+  GRPC_DLL void Release(size_t num_threads);
 
  private:
   Mutex mu_;
diff --git a/src/core/lib/security/context/security_context.h b/src/core/lib/security/context/security_context.h
index 105222eefd..604c2fe367 100644
--- a/src/core/lib/security/context/security_context.h
+++ b/src/core/lib/security/context/security_context.h
@@ -52,7 +52,7 @@ struct grpc_auth_property_array {
   size_t capacity = 0;
 };
 
-void grpc_auth_property_reset(grpc_auth_property* property);
+GRPC_DLL void grpc_auth_property_reset(grpc_auth_property* property);
 
 #define GRPC_AUTH_CONTEXT_ARG "grpc.auth_context"
 
diff --git a/src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.h b/src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.h
index f002013aef..1063917004 100644
--- a/src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.h
+++ b/src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.h
@@ -106,7 +106,7 @@ class StaticDataCertificateProvider final
 
   UniqueTypeName type() const override;
 
-  absl::Status ValidateCredentials() const;
+  GRPC_DLL absl::Status ValidateCredentials() const;
 
  private:
   struct WatcherInfo {
diff --git a/src/core/lib/security/util/json_util.h b/src/core/lib/security/util/json_util.h
index 6425d32aaf..a15056773f 100644
--- a/src/core/lib/security/util/json_util.h
+++ b/src/core/lib/security/util/json_util.h
@@ -31,7 +31,7 @@
 #define GRPC_AUTH_JSON_TYPE_EXTERNAL_ACCOUNT "external_account"
 
 // Gets a child property from a json node.
-const char* grpc_json_get_string_property(const grpc_core::Json& json,
+GRPC_DLL const char* grpc_json_get_string_property(const grpc_core::Json& json,
                                           const char* prop_name,
                                           grpc_error_handle* error);
 
diff --git a/src/core/lib/surface/call.h b/src/core/lib/surface/call.h
index bc7220ac60..baec12c33c 100644
--- a/src/core/lib/surface/call.h
+++ b/src/core/lib/surface/call.h
@@ -302,9 +302,9 @@ grpc_compression_algorithm grpc_call_compression_for_level(
 // Did this client call receive a trailers-only response
 // TODO(markdroth): This is currently available only to the C++ API.
 //                  Move to surface API if requested by other languages.
-bool grpc_call_is_trailers_only(const grpc_call* call);
+GRPC_DLL bool grpc_call_is_trailers_only(const grpc_call* call);
 
 // Returns the authority for the call, as seen on the server side.
-absl::string_view grpc_call_server_authority(const grpc_call* call);
+GRPC_DLL absl::string_view grpc_call_server_authority(const grpc_call* call);
 
 #endif  // GRPC_SRC_CORE_LIB_SURFACE_CALL_H
diff --git a/src/core/lib/surface/completion_queue.h b/src/core/lib/surface/completion_queue.h
index d99c7a248c..d68ce75f8c 100644
--- a/src/core/lib/surface/completion_queue.h
+++ b/src/core/lib/surface/completion_queue.h
@@ -55,8 +55,8 @@ void grpc_cq_internal_unref(grpc_completion_queue* cq, const char* reason,
 #define GRPC_CQ_INTERNAL_UNREF(cq, reason) \
   grpc_cq_internal_unref(cq, reason, __FILE__, __LINE__)
 #else
-void grpc_cq_internal_ref(grpc_completion_queue* cq);
-void grpc_cq_internal_unref(grpc_completion_queue* cq);
+GRPC_DLL void grpc_cq_internal_ref(grpc_completion_queue* cq);
+GRPC_DLL void grpc_cq_internal_unref(grpc_completion_queue* cq);
 #define GRPC_CQ_INTERNAL_REF(cq, reason) grpc_cq_internal_ref(cq)
 #define GRPC_CQ_INTERNAL_UNREF(cq, reason) grpc_cq_internal_unref(cq)
 #endif
@@ -65,11 +65,11 @@ void grpc_cq_internal_unref(grpc_completion_queue* cq);
 // shutdown until a corresponding grpc_cq_end_* call is made.
 // \a tag is currently used only in debug builds. Return true on success, and
 // false if completion_queue has been shutdown.
-bool grpc_cq_begin_op(grpc_completion_queue* cq, void* tag);
+GRPC_DLL bool grpc_cq_begin_op(grpc_completion_queue* cq, void* tag);
 
 // Queue a GRPC_OP_COMPLETED operation; tag must correspond to the tag passed to
 // grpc_cq_begin_op
-void grpc_cq_end_op(grpc_completion_queue* cq, void* tag,
+GRPC_DLL void grpc_cq_end_op(grpc_completion_queue* cq, void* tag,
                     grpc_error_handle error,
                     void (*done)(void* done_arg, grpc_cq_completion* storage),
                     void* done_arg, grpc_cq_completion* storage,
diff --git a/src/core/util/json/json_reader.cc b/src/core/util/json/json_reader.cc
index 5b437af925..d9c2a609c6 100644
--- a/src/core/util/json/json_reader.cc
+++ b/src/core/util/json/json_reader.cc
@@ -946,7 +946,7 @@ absl::StatusOr<Json> JsonReader::Parse(absl::string_view input) {
 
 }  // namespace
 
-absl::StatusOr<Json> JsonParse(absl::string_view json_str) {
+GRPC_DLL absl::StatusOr<Json> JsonParse(absl::string_view json_str) {
   return JsonReader::Parse(json_str);
 }
 
diff --git a/src/core/util/json/json_reader.h b/src/core/util/json/json_reader.h
index 127b380880..864857dab1 100644
--- a/src/core/util/json/json_reader.h
+++ b/src/core/util/json/json_reader.h
@@ -26,7 +26,7 @@
 namespace grpc_core {
 
 // Parses JSON string from json_str.
-absl::StatusOr<Json> JsonParse(absl::string_view json_str);
+GRPC_DLL absl::StatusOr<Json> JsonParse(absl::string_view json_str);
 
 }  // namespace grpc_core
 
diff --git a/src/core/util/load_file.h b/src/core/util/load_file.h
index 980e0c11af..d5206b0534 100644
--- a/src/core/util/load_file.h
+++ b/src/core/util/load_file.h
@@ -26,7 +26,7 @@ namespace grpc_core {
 
 // Loads the content of a file into a slice. add_null_terminator will add a NULL
 // terminator if true.
-absl::StatusOr<Slice> LoadFile(const std::string& filename,
+GRPC_DLL absl::StatusOr<Slice> LoadFile(const std::string& filename,
                                bool add_null_terminator);
 }  // namespace grpc_core
 
diff --git a/src/core/util/time.h b/src/core/util/time.h
index 1de2b4ff99..209f23af56 100644
--- a/src/core/util/time.h
+++ b/src/core/util/time.h
@@ -104,7 +104,7 @@ class Timestamp {
   constexpr Timestamp() = default;
   // Constructs a Timestamp from a gpr_timespec.
   static Timestamp FromTimespecRoundDown(gpr_timespec t);
-  static Timestamp FromTimespecRoundUp(gpr_timespec t);
+  GRPC_DLL static Timestamp FromTimespecRoundUp(gpr_timespec t);
 
   // Construct a Timestamp from a gpr_cycle_counter.
   static Timestamp FromCycleCounterRoundUp(gpr_cycle_counter c);
@@ -272,7 +272,7 @@ class Duration {
   double seconds() const { return static_cast<double>(millis_) / 1000.0; }
 
   // NOLINTNEXTLINE: google-explicit-constructor
-  operator grpc_event_engine::experimental::EventEngine::Duration() const;
+  GRPC_DLL operator grpc_event_engine::experimental::EventEngine::Duration() const;
 
   gpr_timespec as_timespec() const;
 
