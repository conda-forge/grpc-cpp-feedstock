From 37e86c55123f8285c5db9ca3953bc236aad85882 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Wed, 5 Mar 2025 13:21:01 +1100
Subject: [PATCH 14/15] reduce grpc symbol explosion with autogenerated export
 definitions file

Basically, WINDOWS_EXPORT_ALL_SYMBOLS is a nuclear option that includes all symbols
that occur anywhere in the various object files into an export.

In doing so, it mixes two fundamental concerns:
* building the project itself (without having to add lots of macros that do the __declspec dance).
* visibility of symbols from transitive dependencies (like abseil, openssl, etc.) even if these are
  marked as being linked privately.

To give some perspective, the python pefile library shows roughly 10k named/numbered symbols in
grpc.dll, and yet as of v1.68, it blew through the limit of 65535 symbols, which is the maximum
that DLLs can contain. So roughly 5/6th of the symbols are garbage.

In order to make this salvage this situation, we turn off WINDOWS_EXPORT_ALL_SYMBOLS (no other choice)
and add a PRE_LINK script that analyses the symbols in the various object files that have been compiled
for the grpc target. This is based on the "source of truth", i.e. `dumpbin /symbols`, which is part of
the MSVC toolchain. We need to do some light parsing of these dumps, and then decide which symbols to
export explicitly, using the `/DEF:grpc.def` linker command.

Here we need to thread the needle in the sense that we can only put stuff in the `grpc.def` file that
the linker can actually legally find. For example, `Static` symbols that are internal to the objects
would not be found, if we included them. At the same time, the export must be comprehensive enough
that all consumers of the libraries (here mainly grpc++.dll) find the symbols they expect. For this
to work, we need to mark a couple of extra symbols as being exported, using the GRPC_DLL mechanism.

The script that does this (generate_def.py) does some minimal munging and filtering, which could
certainly be sharpened based on a deeper understanding of the Itanium mangling. For now, we do not
filter as aggressively as possible (e.g. lambdas), because our main goal is to get below the 65k
limit, and indeed, we end up <25k, and we don't want to remove symbols over-zealously if some
other consumers end up linking to them.
---
 CMakeLists.txt | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e533337cdf..86c06eb89b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2396,6 +2396,30 @@ add_library(grpc
   src/core/xds/xds_client/xds_client.cc
 )
 
+if(WIN32 AND MSVC)
+  # need to turn this off to avoid pulling in enormous amount of transitive symbols
+  set_target_properties(grpc PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS OFF)
+
+  # Add pre-link step to process object files
+  add_custom_command(
+    TARGET grpc
+    PRE_LINK
+    COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/symbols"
+    COMMAND echo "for %%f in (<TARGET_OBJECTS:grpc>) do dumpbin /symbols %%f > ${CMAKE_CURRENT_BINARY_DIR}/symbols/symbols_%%~nf.txt"
+    COMMAND for %%f in ($<TARGET_OBJECTS:grpc>) do dumpbin /symbols %%f > ${CMAKE_CURRENT_BINARY_DIR}/symbols/symbols_%%~nf.txt
+    COMMAND echo "$ENV{BUILD_PREFIX}/python generate_def.py symbols grpc.def"
+    COMMAND $ENV{BUILD_PREFIX}/python ${CMAKE_SOURCE_DIR}/generate_def.py ${CMAKE_CURRENT_BINARY_DIR}/symbols ${CMAKE_CURRENT_BINARY_DIR}/grpc.def
+    BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/grpc.def
+    COMMENT "Generating grpc.def from object files"
+    VERBATIM
+    USES_TERMINAL
+  )
+  # export only filtered list of symbols
+  set_target_properties(grpc PROPERTIES
+    LINK_FLAGS "/DEF:${CMAKE_CURRENT_BINARY_DIR}/grpc.def"
+  )
+endif()
+
 target_compile_features(grpc PUBLIC cxx_std_17)
 
 set_target_properties(grpc PROPERTIES
