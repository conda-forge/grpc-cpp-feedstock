{% set version = "1.74.1" %}

# core package & vendored libs use different version scheme than CPP libs, see
# top of https://github.com/grpc/grpc/blob/v{{ version }}/CMakeLists.txt
# the difference of 25 is empirical, last changed in 1.70 (1.69 had a non-zero minor version)
{% set core_major = version.split(".")[1] | int - 25 %}
{% set core_version = core_major | string ~ ".0.0" %}

{% set core_libs = ["gpr", "grpc", "grpc_unsecure"] %}
{% set core_cpp_libs = ["grpc++", "grpc++_unsecure"] %}
{% set vendored_libs = ["address_sorting"] %}
{% set binaries_plugin_langs = [
    "cpp", "csharp", "node", "objective_c", "php", "python", "ruby"
] %}

package:
  name: grpc-split
  version: {{ version }}

source:
  - url: https://github.com/grpc/grpc/archive/v{{ version.replace(".pre", "-pre") }}.tar.gz
    sha256: 7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228
    patches:
      - patches/0001-windows-ssl-lib-names.patch
      - patches/0002-fix-win-setup-cmds.patch
      - patches/0003-Link-against-grpc-and-abseil.patch
      - patches/0004-force-protoc-executable.patch
      # mark target_link_libraries for grpc as PRIVATE where possible
      - patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch
      # fix symbol visibility regression on windows
      - patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch
      # get gRPC_BUILD_TESTS=ON to build
      - patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch
      # see https://github.com/grpc/grpc/pull/38893
      - patches/0008-add-enable_testing-so-tests-get-run.patch
      # protobuf is now shipping upb, so we cannot ship it here; see
      # https://github.com/protocolbuffers/protobuf/issues/12927
      # https://github.com/conda-forge/libprotobuf-feedstock/pull/240
      # https://github.com/grpc/grpc/commit/7819891fabcd1d2ff55c26c2b0755ab52ccd8e20
      - patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch
      # full test suite takes too long to build; reduce set of tests
      - patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch
      # don't rebuild protobuf/upb/abseil for grpcio-tools
      - patches/0011-build-grpcio-tools-from-source.patch
      - patches/0012-add-linkage-to-openssl-to-grpc_unsecure.patch                  # [win]
      - patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch
      - patches/0014-update-GRPC_DLL-instances-where-necessary.patch

  {% if build_platform == target_platform and not win %}
  - folder: third_party/benchmark
    git_url: https://github.com/google/benchmark.git
    git_rev: 12235e24652fc7f809373e7c11a5f73c5763fc4c

  - folder: third_party/envoy-api
    git_url: https://github.com/envoyproxy/data-plane-api.git
    git_rev: 4de3c74cf21a9958c1cf26d8993c55c6e0d28b49

  - folder: third_party/googleapis
    git_url: https://github.com/googleapis/googleapis.git
    git_rev: fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0

  - folder: third_party/googletest
    git_url: https://github.com/google/googletest.git
    git_rev: 52eb8108c5bdec04579160ae17225d66034bd723

  - folder: third_party/protoc-gen-validate
    git_url: https://github.com/envoyproxy/protoc-gen-validate.git
    git_rev: 32c2415389a3538082507ae537e7edd9578c64ed

  - folder: third_party/xds
    git_url: https://github.com/cncf/xds.git
    git_rev: 3a472e524827f72d1ad621c4983dd5af54c46776
  {% endif %}

build:
  number: 1

outputs:
  - name: libgrpc
    script: build-cpp.sh  # [not win]
    script: build-cpp.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage('libgrpc', max_pin='x.x') }}
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - python *      # [win]
        # for analysing total number of symbols in grpc.dll
        - py-lief       # [win]
        # During cross-compilation, we need to build the grpc_cpp_plugin for the
        # architecture of the build agent (where it will be executed afterwards),
        # thus we need the respective host dependencies also in the build env.
        - c-ares        # [build_platform != target_platform]
        - libabseil     # [build_platform != target_platform]
        - libprotobuf   # [build_platform != target_platform]
        - openssl       # [build_platform != target_platform]
        - re2           # [build_platform != target_platform]
        - zlib          # [build_platform != target_platform]
      host:
        - libabseil
        - c-ares
        - libprotobuf
        - re2
        - openssl
        - zlib
      run:
        - ucrt  # [win]
      run_constrained:
        # make sure we don't co-install with old version of previous package name
        - grpc-cpp ={{ version }}
    test:
      requires:
        # protoc needs compiler; cmake also needs one to run package detection, see
        # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config
        # only required for pkg-config test (which wants to find zlib.pc)
        - zlib
      files:
        - cmake_test/
        - hello.proto
        - test_grpc.sh
        - test_grpc.bat
      source_files:
        - examples/cpp/helloworld/
        # the example needs these other files to compile:
        - examples/cpp/cmake/
        - examples/protos/helloworld.proto
      commands:
        # libraries
        {% for each_lib in core_libs + core_cpp_libs + vendored_libs %}
        # presence of shared libs
        - test -f $PREFIX/lib/lib{{ each_lib }}.so              # [linux]
        - test -f $PREFIX/lib/lib{{ each_lib }}.dylib           # [osx]
        - if not exist %LIBRARY_BIN%\{{ each_lib }}.dll exit 1  # [win]
        - if not exist %LIBRARY_LIB%\{{ each_lib }}.lib exit 1  # [win]

        # absence of static libs (unix)
        - test ! -f $PREFIX/lib/lib{{ each_lib }}.a             # [unix]
        {% endfor %}

        # binaries
        {% for each_lang in binaries_plugin_langs %}
        - test -f $PREFIX/bin/grpc_{{ each_lang }}_plugin                    # [unix]
        - if not exist %LIBRARY_BIN%\grpc_{{ each_lang }}_plugin.exe exit 1  # [win]
        {% endfor %}

        # pkg-config (no metadata for vendored libs)
        {% for each_lib in core_libs %}
        - pkg-config --print-errors --exact-version "{{ core_version }}" {{ each_lib }}
        {% endfor %}
        {% for each_lib in core_cpp_libs %}
        - pkg-config --print-errors --exact-version "{{ version }}" {{ each_lib }}
        {% endfor %}

        # CMake test: compile upstream example
        - ./test_grpc.sh   # [unix]
        - ./test_grpc.bat  # [win]

        # test availability of symbol needed by arrow (esp. on windows)
        - cd cmake_test
        - cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .   # [unix]
        - cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% .  # [win]
        - cmake --build .

  - name: grpcio
    script: build-grpcio.sh  # [not win]
    script: build-grpcio.bat  # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - python
        - pip
        - setuptools
        - cython
        - {{ pin_subpackage('libgrpc', exact=True) }}
        - pthread-stubs                               # [linux]
        - zlib
      run:
        - python
        - {{ pin_subpackage('libgrpc', exact=True) }}
    test:
      source_files:
        - examples/python/helloworld/
        - examples/protos/helloworld.proto
      files:
        - grpcio_distribtest.py
        - test_grpcio_helloworld.py
      requires:
        - pip
        - grpcio-tools
      imports:
        - grpc
        - grpc._cython
        - grpc._cython._cygrpc
        - grpc.beta
        - grpc.framework
        - grpc.framework.common
        - grpc.framework.foundation
        - grpc.framework.interfaces
        - grpc.framework.interfaces.base
        - grpc.framework.interfaces.face
      commands:
        - python -m pip check
        - python grpcio_distribtest.py
        {% if build_platform == target_platform %}
        # test actual RPC pattern (client & server); other tests did not catch
        # https://github.com/conda-forge/grpc-cpp-feedstock/issues/281
        - cd examples/python/helloworld
        # generate helloworld, see https://grpc.io/docs/languages/python/quickstart/#generate-grpc-code
        - python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto
        # copy test defined in feedstock to where it needs to run
        - cp ../../../test_grpcio_helloworld.py .
        - python test_grpcio_helloworld.py
        {% endif %}

  - name: grpcio-tools
    build:
      script:
        - cd tools/distrib/python/grpcio_tools
        - export GRPC_PYTHON_BUILD_WITH_CYTHON=true  # [unix]
        - set GRPC_PYTHON_BUILD_WITH_CYTHON=true     # [win]
        - python -m pip install . -vv
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - grpcio {{ version }} *_{{ PKG_BUILDNUM }}
        - python
        - cython
        - pip
        - setuptools
        - libabseil
        - libprotobuf
      run:
        - grpcio {{ version }} *_{{ PKG_BUILDNUM }}
        - python
        - protobuf
        - setuptools
    test:
      requires:
        - pip
      imports:
        - grpc_tools
      commands:
        - pip check
        # see https://github.com/conda-forge/grpc-cpp-feedstock/issues/385
        - test "$(python -m grpc_tools.protoc --version)" == "$(protoc --version)"  # [unix]

about:
  home: https://grpc.io/
  license: Apache-2.0
  license_family: APACHE
  license_file: LICENSE
  summary: gRPC - A high-performance, open-source universal RPC framework
  description: |
    gRPC is a modern, open source, high-performance remote procedure call
    (RPC) framework that can run anywhere. gRPC enables client and server
    applications to communicate transparently, and simplifies the building
    of connected systems.

    This package contains the gRPC C++ libraries and header files, as well
    as the code generation plugins.
  doc_url: https://grpc.io/docs/
  dev_url: https://github.com/grpc/grpc

extra:
  recipe-maintainers:
    - pitrou
    - xhochy
    - wesm
    - h-vetinari
    - mariusvniekerk
    - jjerphan
    - JohanMabille
  feedstock-name: grpc-cpp
